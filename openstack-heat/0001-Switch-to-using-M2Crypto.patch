From b41893390e67bb2f4626f226991e6a9b342070fc Mon Sep 17 00:00:00 2001
From: Jeff Peeler <jpeeler@redhat.com>
Date: Wed, 8 May 2013 12:27:35 -0400
Subject: [PATCH] Switch to using M2Crypto

This patch uses M2Crypto instead of PyCrypto to perform encryption
and decryption of user authentication information.
---
 heat/common/crypt.py | 32 ++++++++++++++------------------
 requirements.txt     |  1 +
 2 files changed, 15 insertions(+), 18 deletions(-)

diff --git a/heat/common/crypt.py b/heat/common/crypt.py
index c87678f..b3fdd45 100644
--- a/heat/common/crypt.py
+++ b/heat/common/crypt.py
@@ -13,10 +13,11 @@
 #    under the License.
 
 import base64
-from Crypto.Cipher import AES
+import M2Crypto
+from os import urandom
+
 from oslo.config import cfg
 
-from heat.openstack.common.crypto import utils
 from heat.openstack.common import log as logging
 
 
@@ -34,19 +35,12 @@ logger = logging.getLogger(__name__)
 def encrypt(auth_info):
     if auth_info is None:
         return None, None
-    sym = utils.SymmetricCrypto()
-    res = sym.encrypt(cfg.CONF.auth_encryption_key[:32],
-                      auth_info, b64encode=True)
-    return 'oslo_decrypt_v1', res
-
-
-def oslo_decrypt_v1(auth_info):
-    if auth_info is None:
-        return None
-    sym = utils.SymmetricCrypto()
-    return sym.decrypt(cfg.CONF.auth_encryption_key[:32],
-                       auth_info, b64decode=True)
-
+    iv = urandom(16)
+    cipher = M2Crypto.EVP.Cipher(alg='aes_128_cbc',
+                                 key=cfg.CONF.auth_encryption_key[:32], iv=iv,
+                                 op=1) # 1 is encode
+    res = base64.b64encode(iv + cipher.update(auth_info) + cipher.final())
+    return 'heat_decrypt', res
 
 def heat_decrypt(auth_info):
     """Decrypt function for data that has been encrypted using an older
@@ -60,7 +54,9 @@ def heat_decrypt(auth_info):
     if auth_info is None:
         return None
     auth = base64.b64decode(auth_info)
-    iv = auth[:AES.block_size]
-    cipher = AES.new(cfg.CONF.auth_encryption_key[:32], AES.MODE_CFB, iv)
-    res = cipher.decrypt(auth[AES.block_size:])
+    iv = auth[:16]
+    cipher = M2Crypto.EVP.Cipher(alg='aes_128_cbc',
+                                 key=cfg.CONF.auth_encryption_key[:32], iv=iv,
+                                 op=0) # 0 is decode
+    res = cipher.update(auth[16:]) + cipher.final()
     return res
diff --git a/requirements.txt b/requirements.txt
index 4b6298d..ae9e85f 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,5 +1,6 @@
 pbr>=0.6,<1.0
 pycrypto>=2.6
+M2Crypto
 eventlet>=0.13.0
 greenlet>=0.3.2
 httplib2>=0.7.5
